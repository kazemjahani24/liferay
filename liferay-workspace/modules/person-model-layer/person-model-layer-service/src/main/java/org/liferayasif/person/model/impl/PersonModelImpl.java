/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.liferayasif.person.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.liferayasif.person.model.Person;
import org.liferayasif.person.model.PersonModel;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Person service. Represents a row in the &quot;FOO_Person&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>PersonModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersonImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PersonImpl
 * @generated
 */
@ProviderType
public class PersonModelImpl
	extends BaseModelImpl<Person> implements PersonModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a person model instance should use the <code>Person</code> interface instead.
	 */
	public static final String TABLE_NAME = "FOO_Person";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"personId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"age", Types.INTEGER},
		{"gender", Types.VARCHAR}, {"emailId", Types.VARCHAR},
		{"nationality", Types.VARCHAR}, {"occupation", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("age", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occupation", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FOO_Person (uuid_ VARCHAR(75) null,personId LONG not null primary key,name VARCHAR(75) null,age INTEGER,gender VARCHAR(75) null,emailId VARCHAR(75) null,nationality VARCHAR(75) null,occupation VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table FOO_Person";

	public static final String ORDER_BY_JPQL = " ORDER BY person.personId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY FOO_Person.personId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long PERSONID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public PersonModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _personId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPersonId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _personId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Person.class;
	}

	@Override
	public String getModelClassName() {
		return Person.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Person, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Person, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Person, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Person)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Person, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Person, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Person)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Person, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Person, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Person>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Person.class.getClassLoader(), Person.class, ModelWrapper.class);

		try {
			Constructor<Person> constructor =
				(Constructor<Person>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Person, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Person, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Person, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Person, Object>>();
		Map<String, BiConsumer<Person, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Person, ?>>();

		attributeGetterFunctions.put("uuid", Person::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Person, String>)Person::setUuid);
		attributeGetterFunctions.put("personId", Person::getPersonId);
		attributeSetterBiConsumers.put(
			"personId", (BiConsumer<Person, Long>)Person::setPersonId);
		attributeGetterFunctions.put("name", Person::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Person, String>)Person::setName);
		attributeGetterFunctions.put("age", Person::getAge);
		attributeSetterBiConsumers.put(
			"age", (BiConsumer<Person, Integer>)Person::setAge);
		attributeGetterFunctions.put("gender", Person::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<Person, String>)Person::setGender);
		attributeGetterFunctions.put("emailId", Person::getEmailId);
		attributeSetterBiConsumers.put(
			"emailId", (BiConsumer<Person, String>)Person::setEmailId);
		attributeGetterFunctions.put("nationality", Person::getNationality);
		attributeSetterBiConsumers.put(
			"nationality", (BiConsumer<Person, String>)Person::setNationality);
		attributeGetterFunctions.put("occupation", Person::getOccupation);
		attributeSetterBiConsumers.put(
			"occupation", (BiConsumer<Person, String>)Person::setOccupation);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getPersonId() {
		return _personId;
	}

	@Override
	public void setPersonId(long personId) {
		_personId = personId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public int getAge() {
		return _age;
	}

	@Override
	public void setAge(int age) {
		_age = age;
	}

	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@Override
	public String getEmailId() {
		if (_emailId == null) {
			return "";
		}
		else {
			return _emailId;
		}
	}

	@Override
	public void setEmailId(String emailId) {
		_emailId = emailId;
	}

	@Override
	public String getNationality() {
		if (_nationality == null) {
			return "";
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		_nationality = nationality;
	}

	@Override
	public String getOccupation() {
		if (_occupation == null) {
			return "";
		}
		else {
			return _occupation;
		}
	}

	@Override
	public void setOccupation(String occupation) {
		_occupation = occupation;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Person.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Person toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Person>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersonImpl personImpl = new PersonImpl();

		personImpl.setUuid(getUuid());
		personImpl.setPersonId(getPersonId());
		personImpl.setName(getName());
		personImpl.setAge(getAge());
		personImpl.setGender(getGender());
		personImpl.setEmailId(getEmailId());
		personImpl.setNationality(getNationality());
		personImpl.setOccupation(getOccupation());

		personImpl.resetOriginalValues();

		return personImpl;
	}

	@Override
	public int compareTo(Person person) {
		long primaryKey = person.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Person)) {
			return false;
		}

		Person person = (Person)obj;

		long primaryKey = person.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		PersonModelImpl personModelImpl = this;

		personModelImpl._originalUuid = personModelImpl._uuid;

		personModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Person> toCacheModel() {
		PersonCacheModel personCacheModel = new PersonCacheModel();

		personCacheModel.uuid = getUuid();

		String uuid = personCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			personCacheModel.uuid = null;
		}

		personCacheModel.personId = getPersonId();

		personCacheModel.name = getName();

		String name = personCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			personCacheModel.name = null;
		}

		personCacheModel.age = getAge();

		personCacheModel.gender = getGender();

		String gender = personCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			personCacheModel.gender = null;
		}

		personCacheModel.emailId = getEmailId();

		String emailId = personCacheModel.emailId;

		if ((emailId != null) && (emailId.length() == 0)) {
			personCacheModel.emailId = null;
		}

		personCacheModel.nationality = getNationality();

		String nationality = personCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			personCacheModel.nationality = null;
		}

		personCacheModel.occupation = getOccupation();

		String occupation = personCacheModel.occupation;

		if ((occupation != null) && (occupation.length() == 0)) {
			personCacheModel.occupation = null;
		}

		return personCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Person, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Person, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Person, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Person)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Person, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Person, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Person, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Person)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Person>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _personId;
	private String _name;
	private int _age;
	private String _gender;
	private String _emailId;
	private String _nationality;
	private String _occupation;
	private long _columnBitmask;
	private Person _escapedModel;

}